////////////////////////////////////////////////////////////////////////
//
// Глобальная обертка для основного лога
//

#Использовать logos

Перем мЛог;

///////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура Закрыть() Экспорт
	мЛог.Закрыть();
КонецПроцедуры

Процедура ДобавитьСпособВывода(Знач СпособВывода) Экспорт
	мЛог.ДобавитьСпособВывода(СпособВывода);
КонецПроцедуры

Процедура УдалитьСпособВывода(Знач СпособВывода) Экспорт
	мЛог.УдалитьСпособВывода(СпособВывода);
КонецПроцедуры

Процедура Отладка(Знач Сообщение) Экспорт
	мЛог.Отладка(Сообщение);
КонецПроцедуры

Процедура Информация(Знач Сообщение) Экспорт
	мЛог.Информация(Сообщение);
КонецПроцедуры

Процедура Предупреждение(Знач Сообщение) Экспорт
	мЛог.Предупреждение(Сообщение);
КонецПроцедуры

Процедура Ошибка(Знач Сообщение) Экспорт
	мЛог.Ошибка(Сообщение);
КонецПроцедуры

Процедура КритичнаяОшибка(Знач Сообщение) Экспорт
	мЛог.КритичнаяОшибка(Сообщение);
КонецПроцедуры

// Позволяет получить внутренний объект лога
//
Функция ПолучитьОбъектЛога() Экспорт
	Возврат мЛог;
КонецФункции

// Если это необходимо, можно переопределить раскладку лога системы.
//
Функция ОбъектРаскладкиЛога() 
	// Возврат ЭтотОбъект;
КонецФункции

// Реализует форматирование сообщений лога (раскладку лога)
//
Функция Форматировать(Знач УровеньЛога, Знач Сообщение)
	ВызватьИсключение "Не реализовано";
КонецФункции 

////////////////////////////////////////////////////////////////////////

ИмяЛога = ПараметрыСистемы.ИмяЛогаСистемы();
мЛог = Логирование.ПолучитьЛог(ИмяЛога);

Если ОбъектРаскладкиЛога() <> Неопределено Тогда
	мЛог.УстановитьРаскладку(ОбъектРаскладкиЛога());
КонецЕсли;